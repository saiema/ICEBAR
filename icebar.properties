#AUTOMATICALLY GENERATED PROPERTIES
#IMPORTANT: Properties that do not have a default value (need to be manually set) will have 'UNSET' as value

#ICEBAR can be configured both by a .properties file having lines with <key>=<value> or by using `-D<key>=<value>` command line arguments.
#The command line arguments will always override the configurations defined in the .properties file, available options are:

#[BOOLEAN] When true, if a properties value is invalid, the default value (when available) will be used instead.
icebar.usedefaultoninvalidvalue=true

#[PATH] BeAFix jar location (CLI version of BeAFix, please verify minimum required version).
icebar.tools.beafix.jar=/home/stein/Desktop/Projects/ICEBAR/BeAFix/out/artifacts/BeAFixCLI_jar/BeAFixCLI-2.12.1rc.jar

#[POSITIVE INTEGER] How many tests will BeAFix try to generate, this defines an upper bound as it limits how many instances to use.
icebar.tools.beafix.tests=1

#[PATH] Defines the location for model overrides' folder (used by BeAFix to swap signature/field initialization with function initialization), no value means no overriding.
#	See BeAFix's documentation for more information (execute `java -jar <BeAFixCLI jar> --help TESTS`).
icebar.tools.beafix.modeloverridesfolder=

#[BOOLEAN] Defines if BeAFix generate tests from instances (obtained by run commands with expect 1).
icebar.tools.beafix.instancetests=true

#[BOOLEAN] When set to true, this will prevent generation of tests like '<INSTANCE> expect 1' for '<INSTANCE> && <PRED> expect 0' tests when the model has no facts.
icebar.tools.beafix.noinstancetestsfornegativetestwhennofacts=true

#[ABSOLUTE PATH] The root folder for ARepair, the following restrictions apply:
#	1) A sat-solvers folder must exist inside the root folder containing minisat libraries
#	2) A libs folder inside root containing both alloy.jar and aparser-1.0.jar
#	3) A target folder inside root containing arepair-1.0-jar-with-dependencies.jar
icebar.tools.arepair.root=/home/stein/Desktop/Projects/ICEBAR/ARepair

#[BOOLEAN] When true, partial fixes found by ARepair will be treated as fixes. We suggest to enable this option.
icebar.tools.arepair.partialrepairasfixes=true

#[NON NEGATIVE INTEGER] Number of iterations done by ICEBAR until a fix is found.
#	A value of `0` is equivalent to run ARepair with the initial tests and check if the fix found satisfies the property-based oracle.
icebar.laps=20

#[BOOLEAN] Candidates with less violated properties will be given priority when this option is enabled.
icebar.priorization=false

#[DFS|BFS] Base search algorithm, either Depth First Search (DFS) or Breadth First Search (BFS).
icebar.search=BFS

#[BOOLEAN] Will call BeAFix Test generation with relaxed facts (incrementally remove facts until an instance can be generated).
#	This will only be used when no tests where produced by more trusted methods, see ICEBAR documentation
icebar.allowrelaxedfacts=true

#[BOOLEAN] Will call BeAFix Test generation forcing assertion tests (this will generate predicates from where to try and generate tests).
#	This will only be used when no tests where produced by more trusted methods, see ICEBAR documentation
icebar.forceassertiontests=true

#[BOOLEAN] When true, trusted tests will be shared by all candidates, when disabled, trusted tests will be local to each candidate (except from trusted tests from the original candidate).
icebar.globaltrustedtests=false

#[NON NEGATIVE INTEGER] Timeout (in minutes) for ICEBAR, a `0` value means no timeout.
icebar.timeout=60

#[BOOLEAN] When true, ARepair scope will be updated from the maximum scope used in the oracle (when false, this will only be done for initial tests).
icebar.updatescopefromoracle=true

#[BOOLEAN] When true, ICEBAR will treat ARepair NullPointerExceptions errors as no repair, and continue the search.
#	This option only affect the original version of ARepair, if a patched version (the one accompanying ICEBAR for example) is used, this option is unnecessary.
icebar.keepgoingarepairnpe=true

#[OFF|INFO|FINE] Establish the level of console verbosity:
#	OFF: no logging
#	INFO: only main process steps are logged
#	FINE: everything is logged
icebar.logging.console.verbosity=INFO

#[OFF|INFO|FINE] Establish the level of file verbosity:
#	OFF: no logging
#	INFO: only main process steps are logged
#	FINE: everything is logged
icebar.logging.file.verbosity=FINE

#[BOOLEAN] When true, all used test suites will be saved to files, not only the one that lead to a proper fix.
icebar.search.savealltestsuites=true
